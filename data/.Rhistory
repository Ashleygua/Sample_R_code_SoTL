Ashley_Costco + Eric_Costco
Ashley_Tax + Eric_Tax
Ashley_Costco + Ashley_Tax
knitr::opts_chunk$set(echo = TRUE)
countries <- gapminder #renaming dataset
install.packages("gapminder")
install.packages("viridis")
install.packages("plotly")
install.packages("gganimate")
install.packages("gifski")
install.packages("htmlwidgets")
library(gapminder) # package with a gapminder dataset
library(viridis) # color palette package
library(plotly) # package for interactive data visualizations
library(gganimate) # package for producing gifs, extension of ggplot2
library(gifski) # package for converting video frames to GIF animations
library(htmlwidgets) # save interactive plot as an html file
countries <- gapminder #renaming dataset
head(countries) #inspecting data
ggplot(aes(x = continent), data = countries) +
geom_bar()
ggplot(aes(x = lifeExp), data = countries) +
geom_histogram()
#one numeric variable, one categorical:
ggplot(aes(x = continent, y = lifeExp), data = countries) +
geom_boxplot()
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +   geom_point() +
labs(x = 'Petal length (cm)',
y= 'Sepal length (cm)',
title = 'Petal length vs sepal length of irises')
head(iris) #inspecting the data
#Answer:
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +   geom_point()
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point() +
labs(x = 'Petal length (cm)',
y= 'Sepal length (cm)',
title = 'Petal length vs sepal length of irises') +
theme(plot.title = element_text(hjust = 0.5,
face = 'bold',
size = 18))
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +   geom_point() +
geom_smooth(method = 'lm', se = FALSE) #specifying a linear   trendline with no standard error interval
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) + #setting color by species
geom_smooth(method = 'lm', se = FALSE, col = 'grey25') #making the trendline grey
unique(iris$Species)
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) +
geom_smooth(method = 'lm', se = FALSE, col = 'grey25')+
scale_color_manual(values = c("turquoise3", "goldenrod1","salmon2")) #procviding custom colours
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) +
geom_smooth(method = 'lm', se = FALSE, col = 'grey25')+
scale_color_viridis(discrete = TRUE) #specifying colours for a discrete variable
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) +
geom_smooth(method = 'lm', se = FALSE, col = 'black')+
theme_bw() #black and white theme
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) +
geom_smooth(method = 'lm', se = FALSE, col = 'black')+
theme_minimal() #'minimal' theme
ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) +
labs(x = 'Petal length (cm)',
y= 'Sepal length (cm)',
title = 'Petal length vs sepal length of irises') +
geom_smooth(method = 'lm', se = FALSE, col = 'grey25')+
scale_color_viridis(discrete = TRUE)+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,
face = 'bold',
size = 16)) #additional theme modifications have to come after theme_minimal to not be overridden
myplot <- ggplot(aes(x = Petal.Length, y = Sepal.Length), data = iris) +
geom_point(aes(col = Species)) +
labs(x = 'Petal length (cm)',
y= 'Sepal length (cm)',
title = 'Petal length vs sepal length of irises') +
geom_smooth(method = 'lm', se = FALSE, col = 'grey25')+
scale_color_viridis(discrete = TRUE)+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,
face = 'bold',
size = 16))
ggsave("myplot.png", plot = myplot, device="png", width = 8, height = 5)
getwd()
ggplot(aes(x=gdpPercap, y=lifeExp), data = countries)+
geom_point(aes(col = year)) +
geom_smooth(method = 'lm', se = FALSE, col = 'grey25') +
scale_colour_viridis()+
labs(x = 'GDP per capita ($)', y = 'life expectancy (yrs)')+
theme_bw()
ggplot(aes(x=log(gdpPercap), y=lifeExp), data = countries)+ #log of x
geom_point(aes(col = year)) +
geom_smooth(method = 'lm', se = FALSE, col = 'grey25') +
scale_colour_viridis()+
labs(x = 'log 10 of GDP per capita ($)', y = 'life expectancy (yrs)')+
theme_bw()
countries$year<-as.character(countries$year) #need our data to be categorical instead of continuous for this
ggplot(aes(x=log(gdpPercap), y=lifeExp), data = countries)+
geom_point(aes(col = year)) +
geom_smooth(aes(col = year),method = 'lm', se = FALSE) + #add colour argument
scale_colour_viridis(discrete = TRUE)+
labs(x = 'log 10 of GDP per capita ($)', y = 'life expectancy (yrs)')+
theme_bw()
ggplot(aes(x=log(gdpPercap), y=lifeExp), data = countries)+
geom_point(aes(col = year)) +
geom_smooth(col = 'grey25',method = 'lm', se = FALSE) +
scale_colour_viridis(discrete = TRUE)+
labs(x = 'log 10 of GDP per capita ($)', y = 'life expectancy (yrs)') +
theme_bw() +
facet_wrap(~year) #facet by year
countries$year<-as.numeric(countries$year) #need our data to be numerical instead of categorical for this
gif_countries <-
ggplot(aes(x=log(gdpPercap), y=lifeExp),
data = countries)+
geom_point(aes(col = continent), alpha = 0.75)+
scale_colour_viridis(discrete = TRUE)+
transition_time(year)+ #creating gif through time
shadow_wake(wake_length = 0.5)+ #adding tails
labs(title="Life expectancy vs GDP per  capita in {frame_time}",
x="Log 10 of GDP per capita",
y="Life expectancy")+
theme_bw()
gif_countries
#can save with:
anim_save("countries.gif", animation = gif_countries, path = NULL)
getwd()
countries07 <- countries[countries$year==2007,] #filtering data
plot07 <- ggplot(aes(x=log(gdpPercap), y=lifeExp), data = countries07)+
geom_point(aes( color=continent))+
labs(title="Life expectancy vs GDP per capita, 2007",
x="Log 10 of GDP per capita",
y="Life expectancy")+
geom_smooth(aes(color=continent), method="lm", se=FALSE) +
scale_colour_viridis(discrete = TRUE) +
theme_bw()
ggplotly(plot07) #making interactive
#can save with:
plotly07<-ggplotly(plot07)
saveWidget(as_widget(plotly07), "plotly07.html")
View(countries07)
countries07 |> filter(country == Canada)
countries07 |> filter(country == "Canada")
countries07 |> filter(country == "Australia")
countries07 |> filter(country == "United States")
countries07 |> filter(country == "New Zealand")
plot1 <- ggplot(aes(x=log(gdpPercap), y=lifeExp,
frame=year), #adding frame to aes
data = countries)+
geom_point(aes(color=continent))+
labs(title="Life expectancy vs GDP per capita through time",
x="Log 10 of GDP per capita",
y="Life expectancy")+
geom_smooth(aes(color=continent), method="lm", se=FALSE) +
scale_colour_viridis(discrete = TRUE) +
theme_bw()
ggplotly(plot1)
#save the object as an html file, using htmlwidget package
plotly1<-ggplotly(plot1)
saveWidget(as_widget(plotly1), "plotly1.html")
library(terra)
install.packages("terra")
install.packages("sf")
library(terra)
library(sf)
library(tidyverse)
terraOptions(datatype = "INT4U")
select_tiles <- function(country, year) {
countries <- vect(st_read(
"https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_0_countries.geojson",
quiet = TRUE
) |>
dplyr::select(ADMIN, ISO_A3, geometry))
glad_tiles <- vect(st_read(
"https://raw.githubusercontent.com/georgeportoferreira/ubcdown/main/GLAD_GRID.geojson",
quiet = TRUE
))
countries <- countries[unique(relate(countries, glad_tiles, "intersects", pairs = TRUE)[, 1])]
if (country %in% countries$ADMIN & year > 2020) {
aoi <- countries[countries$ADMIN == country, ]
} else if (country %in% countries$ISO_A3 & year > 2020) {
aoi <- countries[countries$ISO_A3 == country, ]
} else {
return(print("No data for selected country or year"))
}
tiles_country <- glad_tiles$id[relate(glad_tiles, aoi, "intersects", pairs = TRUE)[, 1]]
return(list(tiles_country, aoi))
}
load_n_mask <- function(selected_tile, aoi, year, dsn = NA) {
file_path_date <- paste0(
ifelse(is.na(dsn),
"https://storage.googleapis.com/earthenginepartners-hansen/GLADalert/C2/current/alertDate", paste0(dsn,"/alertDate")),
substr(year, 3, 4), "_", selected_tile, ".tif"
)
file_path_alert <- paste0(
ifelse(is.na(dsn), "https://storage.googleapis.com/earthenginepartners-hansen/GLADalert/C2/current/alert", paste0(dsn,"/alert")),
substr(year, 3, 4), "_", selected_tile, ".tif"
)
print(paste0(" - ", ifelse(is.na(dsn), "Downloading", "Reading from disk"), " and masking tile at ", format(Sys.time(), "%b %d %X")))
raster_glad <- mask(rast(file_path_date), aoi) %>% mask(., rast(file_path_alert), maskvalues = 2)
return(raster_glad)
}
clump_n_sieve <- function(masked_glad, pixels = 16) {
if (is.na(minmax(masked_glad)[2])) {
return(print("No clumps for current tile"))
} else {
clumped <- patches(masked_glad, directions = 8, zeroAsNA = TRUE)
f_clumped <- freq(clumped)
}
if (any(f_clumped$count >= pixels)) {
excludeID <- f_clumped$value[which(f_clumped$count < pixels)]
clumped[clumped %in% excludeID] <- NA
f_clumped <- filter(f_clumped, count >= pixels)
return(list(clumped, f_clumped))
} else {
return(print("No clumps for pixel's threshold"))
}
}
get_first_last_date <- function(glad_raster, deforestation, clumped, year) {
first_last_dates <- data.frame(
first = zonal(glad_raster, deforestation, "min", na.rm = TRUE),
last = zonal(glad_raster, deforestation, "max", na.rm = TRUE),
tile = NA,
clump_id = NA
)
first_last_dates$tile <- glad_raster@ptr[["names"]]
names(first_last_dates) <- c("first", "last", "tile", "clump_id")
first_last_dates$clump_id <- clumped[[2]]$value
r_cells <- terra::extract(glad_raster, deforestation, cells = TRUE, na.rm = TRUE, ID = FALSE, exact = TRUE) %>% filter(fraction > 0.5)
c_cells <- terra::extract(clumped[[1]], deforestation, cells = TRUE, na.rm = TRUE, ID = FALSE, exact = TRUE) %>% filter(fraction > 0.5)
cr_cells <- full_join(r_cells, c_cells, by = "cell")
names(cr_cells) <- c("date", "cell", "drop1", "patches", "drop2")
first_last_dates <- left_join(first_last_dates, cr_cells, by = c("clump_id" = "patches", "first" = "date")) %>%
group_by(clump_id) %>%
summarise(first = first(first), last = first(last), tile = first(tile), id = first(cell)) %>%
ungroup()
first_last_dates <- mutate(first_last_dates,
first = as.numeric(as.Date(first, origin = paste0(year, "-01-01"))),
last = as.numeric(as.Date(last, origin = paste0(year, "-01-01"))),
)
return(first_last_dates[, c(5, 2:4)])
}
isdo <- function(country, year, pixels = 16, dsn = NA) {
start_processing <- Sys.time()
print(paste0("Selecting tiles at ", format(Sys.time(), "%b %d %X")))
tiles <- select_tiles(country, year)
if (is.character(tiles)) {
return(tiles)
}
length_tiles <- length(tiles[[1]])
dates <- as.list(NA)
deforestation <- as.list(NA)
clumped_sieved <- as.list(NA)
for (i in 1:length_tiles) {
print(paste0("PROCESS Tile ", i, "/", length_tiles, " - Load and mask tile at ", format(Sys.time(), "%b %d %X")))
masked_glad <- load_n_mask(tiles[[1]][i], tiles[[2]], year, dsn)
print(paste0("PROCESS Tile ", i, "/", length_tiles, " - Clump and sieve tile at ", format(Sys.time(), "%b %d %X")))
clumped_sieved <- clump_n_sieve(masked_glad, pixels)
if (is.character(clumped_sieved)) {
next
} else {
print(paste0("PROCESS Tile ", i, "/", length_tiles, " - Create deforestation geometry at ", format(Sys.time(), "%b %d %X")))
deforestation[[i]] <- as.polygons(clumped_sieved[[1]])
print(paste0("PROCESS Tile ", i, "/", length_tiles, " - Colect dates at ", format(Sys.time(), "%b %d %X")))
dates[[i]] <- get_first_last_date(masked_glad, deforestation[[i]], clumped_sieved, year)
}
}
print(paste0("Gather results at ", format(Sys.time(), "%b %d %X")))
dates <- dates[!is.na(dates)]
deforestation <- deforestation[!is.na(deforestation)]
dates <- dates[!sapply(dates, is.null)]
deforestation <- deforestation[!sapply(deforestation, is.null)]
dates <- do.call("rbind", dates)
deforestation <- do.call("rbind", deforestation)
values(deforestation) <- dates
print(paste("Processing finished successfully after ", format(round(difftime(Sys.time(), start_processing)), 1)))
return(deforestation)
}
library(readxl)
pseudodata_OR <- read_excel("C:/Users/maoyu/OneDrive - UBC/personal/CV/Library/consultation/July 3 Atul Aravindakshan/pseudodata_OR.xlsx")
View(pseudodata_OR)
id <- unique(pseudodata_OR$study_id)
ids <- unique(pseudodata_OR$study_id)
ids
pseudodata_OR[study_id == BE801]
pseudodata_OR[pseudodata_OR$study_id == BE801]
pseudodata_OR[pseudodata_OR$study_id == "BE801", ]
length(pseudodata_OR[pseudodata_OR$study_id == "BE801", ])
pseudodata_OR[pseudodata_OR$study_id == "BE801", ]$cancer_diag
cancer_diag <- pseudodata_OR[pseudodata_OR$study_id == "BE803", ]$cancer_diag
cancer_diag
2 in cancer_diag
2 %in% cancer_diag
which(cancer_diag == 2)[1]
cancer_diag[which(cancer_diag == 2)[1]+1, ])
cancer_diag[which(cancer_diag == 2)[1]+1, ]
cancer_diag[which(cancer_diag == 2)[1]+1]
cancer_diag[-1:-which(cancer_diag == 2)[1]]
ids <- unique(pseudodata_OR$study_id)
exclude_id <- c()
for (id in ids) {
cancer_diag <- pseudodata_OR[study_id == id, ]$cancer_diag
if (2 %in% cancer_diag && 1 %in% cancer_diag[-1:-which(cancer_diag == 2)[1]]){
exclude_id <- c(exclude_id, id)
}
}
ids <- unique(pseudodata_OR$study_id)
exclude_id <- c()
for (id in ids) {
cancer_diag <- pseudodata_OR[pseudodata_OR$study_id == id, ]$cancer_diag
if (2 %in% cancer_diag && 1 %in% cancer_diag[-1:-which(cancer_diag == 2)[1]]){
exclude_id <- c(exclude_id, id)
}
}
exclude_id
cancer_diag <- pseudodata_OR[pseudodata_OR$study_id == "BE803", ]$cancer_diag
cancer_diag
cancer_diag <- pseudodata_OR[pseudodata_OR$study_id == "BE803", ]$cancer_diag; cancer_diag
cancer_diag <- pseudodata_OR[pseudodata_OR$study_id == "BE805", ]$cancer_diag; cancer_diag
select_data <- pseudodata_OR[pseudodata_OR$study_id != exclude_id, ]
View(select_data)
ids <- unique(pseudodata_OR$study_id)
exclude_id <- c("BE803")
for (id in ids) {
cancer_diag <- pseudodata_OR[pseudodata_OR$study_id == id, ]$cancer_diag
if (2 %in% cancer_diag && 1 %in% cancer_diag[-1:-which(cancer_diag == 2)[1]]){
exclude_id <- c(exclude_id, id)
}
}
select_data <- pseudodata_OR[pseudodata_OR$study_id != exclude_id, ]
select_data <- pseudodata_OR[!(pseudodata_OR$study_id %in% exclude_id), ]
View(select_data)
reticulate::repl_python()
reticulate::repl_python()
1 + 1
reticulate::repl_python()
yes
?ggord
??ggird
??ggord
install.packages("ggord")
install.packages("ggord")
setRepositories()
ap <- available.packages()
View(ap)
"ggord" %in% rownames(ap)
library(remotes)
install.packages('ggord')
options(repos = c(
fawda123 = 'https://fawda123.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
install.packages('ggord')
library(ggord)
?ggord
install.packages()
?tidyverse
??tidyverse
library(tidyverse)
dat1 <- read_csv("you_file_path.csv")
# Generate data for the first file
data1 <- tibble(
identifier = sample(1:100, 100, replace = TRUE),
gender = sample(c("Male", "Female"), 100, replace = TRUE),
grades = sample(60:100, 100, replace = TRUE)
)
setwd("C:/Users/maoyu/OneDrive - UBC/personal/CV/SoTL/Sample_R_code_SoTL/data")
# Generate data for the first file
data1 <- dplyr::tibble(
identifier = sample(1:100, 100, replace = TRUE),
gender = sample(c("Male", "Female"), 100, replace = TRUE),
grades = sample(60:100, 100, replace = TRUE)
)
# Generate data for the second file
data2 <- dplyr::tibble(
identifier =  sample(1:100, 100, replace = TRUE),
gender = sample(c("Male", "Female"), 100, replace = TRUE),
grades = sample(60:100, 100, replace = TRUE)
)
# Save the data to CSV files
write.csv(data1, file = "data_file1.csv", row.names = FALSE)
write.csv(data2, file = "data_file2.csv", row.names = FALSE)
dat1 <- read_csv("data_file1.csv")
library(tidyverse)
dat1 <- read_csv("data_file1.csv")
dat1 <- read_csv("data/data_file1.csv")
dat2 <- read_csv("data/data_file2.csv")
View(dat1)
View(dat2)
# Generate pre manipulation grades
data1 <- dplyr::tibble(
Identifier = sample(1:100, 100, replace = TRUE),
Grades = sample(c(60:100, NA), 100, replace = TRUE)
)
# Generate post manipulation grades
data2 <- dplyr::tibble(
identifier =  sample(1:100, 100, replace = TRUE),
grades = sample(c(60:100, NA), 100, replace = TRUE)
)
# Generate data for student info and manipulation conditions
data3 <- dplyr::tibble(
identifier =  1:100,
gender = sample(c('male', 'female', 'prefer not to answer', NA), 100, replace = TRUE),
group = sample(0:1, 100, replace = TRUE)
)
# Save the data to CSV files
write.csv(data1, file = "pre_grades.csv", row.names = FALSE)
write.csv(data2, file = "post_grades.csv", row.names = FALSE)
write.csv(data2, file = "info", row.names = FALSE)
write.csv(data2, file = "info.csv", row.names = FALSE)
pre <- read_csv("data/pre_grades.csv")
post <- read_csv("data/post_grades.csv")
info <- read_csv("data/info.csv")
# Generate pre manipulation grades
data1 <- dplyr::tibble(
Identifier = sample(1:100, 100, replace = TRUE),
Scores = sample(c(60:100, NA), 100, replace = TRUE)
)
# Generate post manipulation grades
data2 <- dplyr::tibble(
identifier =  sample(1:100, 100, replace = TRUE),
grades = sample(c(60:100, NA), 100, replace = TRUE)
)
# Generate data for student info and manipulation conditions
data3 <- dplyr::tibble(
identifier =  1:100,
gender = sample(c('male', 'female', 'prefer not to answer', NA), 100, replace = TRUE),
group = sample(0:1, 100, replace = TRUE)
)
# Save the data to CSV files
write.csv(data1, file = "pre_grades.csv", row.names = FALSE)
write.csv(data2, file = "post_grades.csv", row.names = FALSE)
write.csv(data2, file = "info.csv", row.names = FALSE)
pre <- read_csv("data/pre_grades.csv")
post <- read_csv("data/post_grades.csv")
info <- read_csv("data/info.csv")
pre <- read_csv("data/pre_grades.csv")
post <- read_csv("data/post_grades.csv")
info <- read_csv("data/info.csv")
str(pre)
str(post)
str(info)
str(info)
write.csv(data3, file = "info.csv", row.names = FALSE)
# Generate data for student info and manipulation conditions
data3 <- dplyr::tibble(
identifier =  1:100,
gender = sample(c('male', 'female', 'prefer not to answer', NA), 100, replace = TRUE),
group = sample(0:1, 100, replace = TRUE)
)
write.csv(data3, file = "info.csv", row.names = FALSE)
str(info)
write.csv(data3, file = "info.csv", row.names = FALSE)
View(data3)
info <- read_csv("data/info.csv")
str(info)
View(pre)
View(post)
# Generate pre manipulation grades
data1 <- dplyr::tibble(
Identifier = sample(1:100, 100, replace = TRUE),
Scores = sample(c(60:100, NA), 100, replace = TRUE)
)
# Generate post manipulation grades
data2 <- dplyr::tibble(
identifier =  sample(1:100, 100, replace = TRUE),
grades = sample(c(60:100, NA), 100, replace = TRUE)
)
# Generate data for student info and manipulation conditions
data3 <- dplyr::tibble(
identifier =  1:100,
gender = sample(c('male', 'female', 'prefer not to answer', NA), 100, replace = TRUE),
group = sample(0:1, 100, replace = TRUE)
)
# Save the data to CSV files
write.csv(data1, file = "pre_grades.csv", row.names = FALSE)
write.csv(data2, file = "post_grades.csv", row.names = FALSE)
write.csv(data3, file = "info.csv", row.names = FALSE)
pre <- read_csv("data/pre_grades.csv")
post <- read_csv("data/post_grades.csv")
info <- read_csv("data/info.csv")
str(pre)
str(post)
str(info)
View(pre)
View(post)
View(info)
data <- pre |>
full_join(post, by = "identifier") |>
full_join(info, by = "identifier")
grades <- pre |>
rename("identifier" = "Identifier",
"grades" = "Scores") |>
bind_cols(post)
View(grades)
View(grades)
View(grades)
View(pre)
View(post)
View(pre)
pre <- pre |>
rename("identifier" = "Identifier",
"grades" = "Scores") |>
add_column(time = "pre")
View(pre)
post <- post |>
add_column(time = "post")
View(post)
grades <- pre |>
bind_rows(post)
View(grades)
